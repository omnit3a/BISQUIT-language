Hypersquit v0.2 instruction set

RASEPC:0: store program counter value in register E
RAISEA:x: store x in register A
RAISEB:x: store x in register B
RAISEE:x: store x in register E
STOREA:x: store register A in memory address x
STOREB:x: store register B in memory address x
STOREC:x: store register C in memory address x
STOREE:x: store register E in memory address x
INCREM:x: increment memory address x
DECREM:x: decrement memory address x
ADDTNA:x: add register A and memory address x into register C
ADDTNB:x: add register B and memory address x into register C
SUBTNA:x: subtract register A from memory address x into register C, as long as register A is not 0
SUBTNB:x: subtract register B from memory address x into register C, as long as register B is not 0
BRNCHA:x: if register A = x then goto the next instruction. if register A not = x then skip the next instruction
BRNCHB:x: if register B = x then goto the next instruction. if register B not = x then skip the next instruction
BRNCHC:x: if register C = x then goto the next instruction. if register C not = x then skip the next instruction
BRNCHE:x: if register E = x then goto the next instruction. if register E not = x then skip the next instruction
BRCHNA:x: if register A not = x then goto the next instruction. if register A = x then skip the next instruction
BRCHNB:x: if register B not = x then goto the next instruction. if register B = x then skip the next instruction
BRCHNC:x: if register C not = x then goto the next instruction. if register C = x then skip the next instruction
BRCHNA:x: if register E not = x then goto the next instruction. if register E = x then skip the next instruction
STARTA:x: if register A = x then goto start of the program. if register A not = x then skip the next instruction
STARTB:x: if register B = x then goto start of the program. if register B not = x then skip the next instruction
STARTC:x: if register C = x then goto start of the program. if register C not = x then skip the next instruction
STARTA:x: if register E = x then goto start of the program. if register E not = x then skip the next instruction
GSTART:0: goto start of program
EXITPR:x: terminate program with exit code x
LOADRA:x: load memory address x into register A
LOADRB:x: load memory address x into register B
LOADRE:x: load memory address x into register A
NOOPER:0: no operation (increments program counter)
OUTPUT:x: outputs memory address x to console
OUTPPC:0: outputs program counter to console
OUTCHR:x: outputs ascii character with the value of memory address x to console
